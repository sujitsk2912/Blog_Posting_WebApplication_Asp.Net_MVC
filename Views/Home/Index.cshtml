

@{
    ViewBag.Title = "Home Page";
}



<style>
    .container #postContent {
        min-height: 30px; /* Minimum height */
        max-height: 400px; /* Minimum height */
        height: auto; /* Allow dynamic height */
        overflow-y: auto; /* Enable vertical scrolling if content exceeds height */
        resize: none; /* Disable manual resizing */

        border: none;
        padding: 0;
        box-shadow: none;
        outline: none;
        font-size: 16px;
        overflow: auto;
        resize: none;
        /*        scrollbar-width: none;
        -ms-overflow-style: none;*/
    }

    .container #postCommentBox {
        min-height: 10px; /* Minimum height */
        max-height: 400px; /* Minimum height */
        height: auto; /* Allow dynamic height */
        overflow-y: auto; /* Enable vertical scrolling if content exceeds height */
        resize: none; /* Disable manual resizing */

        border: none;
        padding: 0;
        margin: 0;
        box-shadow: none;
        outline: none;
        font-size: 16px;
        overflow: auto;
        resize: none;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

        .container #postCommentBox::placeholder {
            color: gray !important;
        }

    .modal-body {
        scroll-behavior: smooth;
    }
</style>


<main style="display:flex">

    <div class="container mt-4 col-6">
        <div>
            @if (ViewBag.FirstName != null)
            {
                <div class="container">
                    <h3>Welcome Back, @ViewBag.FirstName</h3>
                </div>
            }
        </div>

        @*post container*@

        <form id="postForm" enctype="multipart/form-data">
            @Html.AntiForgeryToken() <!-- Add this line -->
            <div class="modal fade" id="postModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" style="max-width: 600px !important; width:100% !important">
                    <div class="modal-content" style="min-height:500px; ">
                        <div class="modal-header">
                            <img src="/Assets/Images/user (12).png" style="height:3rem;width:fit-content" class="rounded-circle me-3" alt="User Avatar">
                            <h5 class="modal-title" id="exampleModalLabel">@ViewBag.FirstName @ViewBag.LastName</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3 container">
                                <textarea class="form-control container" id="postContent" name="postContent" placeholder="What do you want to talk about?" rows="2"></textarea>
                                <div id="image-preview" class="mt-3" style="height: fit-content; width: auto; place-self: center;"></div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center p-3">
                            <label for="photo-upload" class="btn btn-outline-info">
                                <i class="bi bi-image"></i> Photo
                            </label>
                            <input type="file" id="photo-upload" name="photo" accept="image/*" style="display: none;" onchange="previewImage(event)" />
                            <button type="button" id="submitPost" class="btn btn-primary px-3" data-bs-dismiss="modal" aria-label="Close" style="border-radius:20px" disabled>Post</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>

        @*end post container*@

        <!-- Post Form -->
        <div class="card ">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <img src="\Assets\Images\user (12).png" style="height:4rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#postModal" class="form-control fw-semibold text-start" style="width: 100%; border-radius: 50px; padding:10px 25px; background-color: #b8b0b030 ">Start a post</button>
                </div>
            </div>
        </div>

        <hr />

        <!-- Blog Feed -->
        <div id="blogContainer" class="container mt-4">
            <form id="postFormComments" enctype="multipart/form-data">

                <!-- Dynamically loaded posts will appear here -->
            </form>
        </div>

    </div>

</main>

@*Scrript for Getting all posts*@


<script>
    $(document).ready(function () {
        // Fetch blog posts using AJAX
        $.ajax({
            url: '/Home/GetPosts',  // Ensure correct path
            type: 'GET',
            success: function (response) {
                console.log('AJAX Response:', response); // Verify the output
                populateBlogFeed(response); // Call the function to populate the blog feed
            },
            error: function (xhr, status, error) {
                console.error('AJAX Error:', xhr.responseText);
            }
        });

        // Function to populate the blog feed using map()
        function populateBlogFeed(posts) {
            console.log('Posts Data:', posts); // Log the posts data
            const container = $('#blogContainer'); // Ensure this exists in your HTML
            if (!container.length) {
                console.error('Container #blogContainer not found!');
                return;
            }
            container.empty(); // Clear existing content

            posts.forEach(post => {
                const postHTML = `
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <img id="getUserImage" src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                         style="height:3rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <div style="display: flex;justify-content: space-between;align-items: self-start;width: 100%;">
                        <div>
                           <h6 id="getUsername" class="mb-0">${post.FirstName || ''} ${post.LastName || ''}</h6>
                            <small id="getPostedOn" class="text-muted">${post.PostedOn ? formatTimeAgo(post.PostedOn) : 'Unknown Date'}</small>
                        </div>
                       <span>
                            <i class="bi bi-three-dots"
                               data-bs-toggle="modal"
                               data-bs-target="#postActionsModal"
                               data-post-id="${post.PostID || ''}"
                               data-post-user-id="${post.UserID || ''}"
                               style="cursor:pointer"></i>
                        </span>
                    </div>
                </div>

                <!-- post action model loaded here -->

                <div class="modal fade" id="postActionsModal" tabindex="-1" aria-labelledby="postActionsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" style="max-width:500px !important">
                        <div class="modal-content">
                            <div class="modal-body" id="postActionsContent">
                                <!-- Dynamic content will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!--end  post action model loaded here -->

                <!-- Post body start -->

    <p id="getPostContent">${(post.PostContent || '').replace(/\n/g, '<br>')}</p>


    ${post.imgURL ? `<img id="getPostImage" src="/PostAssets/images/${post.imgURL}" class="img-fluid rounded mb-3" alt="Blog Image">` : ''}

    <div class="d-flex justify-content-between">
        <button class="btn btn-outline-danger btn-sm"><i class="fa-solid fa-heart pe-1"></i>Like</button>
        <button data-bs-toggle="modal" data-bs-target="#commentModal${post.PostID || ''}" class="btn btn-outline-secondary btn-sm">
            <i class="fa-solid fa-comment pe-1"></i>Comment
        </button>
        <button class="btn btn-outline-success btn-sm"><i class="fa-solid fa-share pe-1"></i>Share</button>
        <button class="btn btn-outline-info btn-sm"><i class="fa-solid fa-bookmark pe-1"></i>Save</button>
    </div>
</div>


<!-- End post body -->


                <!-- Comment Modal -->

               <form id="commentForm" enctype="multipart/form-data">
                @Html.AntiForgeryToken() <!-- Add this line -->

             <div class="modal fade" onclick="loadCommentsInModal(${post.UserID}, ${post.PostID})"
id="commentModal${post.PostID}" data-post-id="${post.PostID}" data-post-user-id="${post.UserID}" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" style="width: 80%">
                    <div class="modal-content" style="display: flex; flex-direction: row; height: 90vh; width: 100%; background: #000; color:#fff">
                        <div class="col-6 d-flex justify-content-center align-items-center">
                            <img src="/PostAssets/images/${post.imgURL || 'img1.png'}" class="img-fluid mb-3" alt="">
                        </div>
                        <div class="col-6 border">
                            <div class="modal-header">
                                <img src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                                     style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                                <h6 class="modal-title" id="commentModalLabel">${post.FirstName + ' ' + post.LastName || 'User'}</h6>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body" style="overflow-y: auto;  scrollbar-width: none; max-height: 64vh;"> <!-- Make modal body scrollable -->
                                ${post.PostContent ? `
                                    <div style="padding:10px 20px">
                                        <div style="display:flex;">
                                            <img src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                                                 style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                                            <h6 class="modal-title" id="commentModalLabel">${post.FirstName + ' ' + post.LastName || 'User'}</h6>
                                        </div>
                                        <p style="padding-left:50px; white-space: pre-wrap !important;">${post.PostContent}</p>
                                    </div>
                                ` : ''}

                              <div class="" id="commentsContainer${post.PostID}">
                                    ${post.Comments ? generateComments(post.Comments) : '<p>No comments available.</p>'}
                                </div>
                            </div>

                            <div class="modal-footer col-6" style="display: flex; position: absolute; bottom: 0; justify-content: center;">
                                <div class="container d-flex align-items-center">
                                    <img src="/Assets/Images/user (13).png" style="height: 2rem; width: auto;" class="rounded-circle me-3" alt="User Avatar">
                                    <textarea id="postCommentBox${post.PostID}" class="form-control container" name="comment" rows="2" placeholder="Add a comment" style="background:transparent;color:#fff;"></textarea>
                                    <button type="button" id="submitComment${post.PostID}" class="btn btn-primary ms-2" style="border-radius:20px">Post</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </form>
            </div>
        </div>`;
                container.append(postHTML);
            });
        }




        // Function to generate comment HTML
        function generateComments(comments) {
            if (!Array.isArray(comments)) {
                return '<p>No comments available.</p>';
            }

            let commentsHTML = '';
            comments.forEach(comment => {
                commentsHTML += `
            <div style="padding:10px 20px">
                <div style="display:flex;">
                    <img src="${comment.UserImage ? '/Assets/Images/' + comment.UserImage : '/Assets/Images/user (13).png'}"
                         style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <h6 class="modal-title">${comment.FirstName || ''} ${comment.LastName || ''}</h6>
                </div>
                <p style="padding-left:50px; white-space: pre-wrap !important;">${(comment.CommentText || '').replace(/\n/g, '<br>')}</p>
            </div>`;
            });
            return commentsHTML;
        }
    });
</script>

@*Function to format "time ago"*@


<script>
    // Function to format "time ago"
    function formatTimeAgo(postedOn) {
        if (!postedOn) return "Unknown time";

        const postDate = new Date(postedOn);
        if (isNaN(postDate)) return "Invalid date"; // Handle invalid dates

        const now = new Date();
        const diff = Math.floor((now - postDate) / 1000); // Difference in seconds

        if (diff < 60) return `${diff} seconds ago`;
        if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
        if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
        if (diff < 172800) return `Yesterday`;
        return `${Math.floor(diff / 86400)} days ago`;
    }
</script>

@*end Function to format "time ago"*@

@*end Scrript for Getting all posts*@


@*Scrript for uploading posts*@
<script src="https://code.jquery.com/jquery-3.7.0.min.js"></script>

<script>
    // Enable/Disable Post Button (Moved to Global Scope)
    function togglePostButton() {
        const content = $('#postContent').val().trim();
        const hasImage = $('#photo-upload')[0].files.length > 0;
        $('#submitPost').prop('disabled', !content && !hasImage);
    }

    // Image Preview Function with FontAwesome Remove Icon
    function previewImage(event) {
        const preview = document.getElementById('image-preview');
        preview.innerHTML = ""; // Clear previous preview

        const file = event.target.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = function (e) {
                const imgContainer = document.createElement('div');
                imgContainer.classList.add('position-relative', 'd-inline-block');

                const img = document.createElement('img');
                img.src = e.target.result;
                img.classList.add('img-fluid', 'mt-2');
                img.style.maxWidth = "auto";

                // FontAwesome Close Icon
                const closeIcon = document.createElement('i');
                closeIcon.className = 'fa-solid fa-circle-xmark position-absolute top-0 end-0 text-danger fs-4 m-1';
                closeIcon.style.cursor = "pointer";
                closeIcon.onclick = function () {
                    preview.innerHTML = "";
                    $('#photo-upload').val(''); // Reset file input
                    togglePostButton(); // Ensure button updates correctly
                };

                imgContainer.appendChild(img);
                imgContainer.appendChild(closeIcon);
                preview.appendChild(imgContainer);
            };
            reader.readAsDataURL(file);
        }
    }

    $(document).ready(function () {
        // Listen for Input Changes
        $('#postContent, #photo-upload').on('input change', togglePostButton);

        // Submit Form via AJAX
        $('#submitPost').on('click', function () {
            const formData = new FormData();
            formData.append('postContent', $('#postContent').val());
            formData.append('imageFile', $('#photo-upload')[0].files[0]);
            formData.append('__RequestVerificationToken', $('[name="__RequestVerificationToken"]').val());

            $.ajax({
                url: '/UploadPost/UploadPost',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    if (response.success) {
                        showToast('Post uploaded successfully!', 'success');
                        $('#postForm')[0].reset();
                        $('#image-preview').html(""); // Clear preview
                        togglePostButton(); // Reset button state
                        setTimeout(() => location.reload(), 1500);
                    } else {
                        showToast('Post uploading failed!', 'error');
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                }
            });
        });
    });

    // Toast Notification Function
    function showToast(message, type) {
        const toastContainer = $('#toastContainer');
        const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `);
        toastContainer.append(toast);
        const bsToast = new bootstrap.Toast(toast[0]);
        bsToast.show();
        toast.on('hidden.bs.toast', () => toast.remove());
    }


</script>


@*Script for Post Actions*@


<script>
    // @*Script for Post Actions*@

$(document).ready(function () {
    const loggedInUserId = @ViewBag.UserId; // Replace with your method to get the logged-in user's ID

    // Event listener for opening the post actions modal
    $(document).on('click', '[data-bs-target="#postActionsModal"]', function () {
        const postId = $(this).data('post-id');
        const postUserId = $(this).data('post-user-id');
        $('#postActionsModal').data('post-id', postId);
        $('#postActionsModal').data('post-user-id', postUserId);
        $('#postActionsContent').empty();

        if (postUserId === loggedInUserId) {
            $('#postActionsContent').append(`
                <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                    <i class="fa-solid fa-edit me-2 text-primary"></i> Edit Post
                </a>
                <a href="javascript:void(0)" class="text-decoration-none text-danger fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                    <i class="fa-solid fa-trash-alt me-2"></i> Delete Post
                </a>
            `);
        } else {
            $('#postActionsContent').append(`
                <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                    <i class="fa-solid fa-share me-2 text-primary"></i> Share
                </a>
                <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                    <i class="fa-solid fa-link me-2 text-primary"></i> Copy Link
                </a>
            `);
        }

        $('#postActionsContent').append(`
            <a href="javascript:void(0)" class="text-decoration-none text-secondary fw-semibold d-flex align-items-center" data-bs-dismiss="modal" aria-label="Close" style="padding:10px 0;">
                <i class="fa-solid fa-close me-2"></i> Cancel
            </a>
        `);

        $('#postActionsModal').modal('show');
    });

    // Handle Delete Post
    $(document).on('click', '#postActionsContent a.text-danger', function () {
        const postId = $('#postActionsModal').data('post-id');
        const userId = $('#postActionsModal').data('post-user-id');
        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to delete this post!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/UploadPost/DeletePost',
                    type: 'POST',
                    data: {
                        userId: userId,
                        postId: postId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            $(`[data-post-id="${postId}"]`).closest('.card').remove();
                            Swal.fire({
                                title: 'Deleted!',
                                text: 'Your post has been deleted.',
                                icon: 'success',
                                confirmButtonText: 'OK'
                            }).then(() => window.location.reload());
                        } else {
                            showToast('Failed to delete post: ' + response.message, 'error');
                        }
                    },
                    error: function (xhr, status, error) {
                        showToast('Error occurred: ' + error, 'error');
                    }
                });
            }
        });
    });

    // Handle Edit Post
    $(document).on('click', '#postActionsContent a.text-dark', function () {
        const postId = $('#postActionsModal').data('post-id');
        window.location.href = `/EditPost/Index/${postId}`;
    });

    // Handle Share Post
    $(document).on('click', '#postActionsContent a.text-dark:contains("Share")', function () {
        const postId = $('#postActionsModal').data('post-id');
        const shareUrl = `${window.location.origin}/Post/Details/${postId}`;
        alert(`Share this post: ${shareUrl}`);
    });

    // Handle Copy Link
    $(document).on('click', '#postActionsContent a.text-dark:contains("Copy Link")', function () {
        const postId = $('#postActionsModal').data('post-id');
        const postUrl = `${window.location.origin}/Post/Details/${postId}`;
        navigator.clipboard.writeText(postUrl).then(() => alert('Link copied to clipboard!')).catch(() => alert('Failed to copy link.'));
    });
});
</script>

@* end Script for Post Actions*@


@*Script for adjusting post content box*@

<script>
    $(document).ready(function () {
        const $messageText = $('#postContent');

        // Function to adjust textarea height dynamically
        function adjustTextareaHeight() {
            $messageText.height('auto'); // Reset height to auto
            $messageText.height($messageText[0].scrollHeight); // Set height to scrollHeight
        }

        // Adjust height on input
        $messageText.on('input', function () {
            adjustTextareaHeight();
        });

        // Initial height adjustment
        adjustTextareaHeight();
    });
</script>

@*end Script for adjusting post content box*@


@*Script for Uploading Comments on a Particular Post*@


<script>

    // @*Script for Uploading Comments on a Particular Post*@
    $(document).on('click', '[id^="submitComment"]', function () {
        const postId = $(this).attr('id').replace('submitComment', '');
        const commentBox = $(`#postCommentBox${postId}`);
        const commentContent = commentBox.val().trim();

        if (!commentContent) {
            showToast('Comment cannot be empty.', 'warning');
            return;
        }

        const postUserId = $(`#commentModal${postId}`).data('post-user-id');

        //console.log(postUserId, postId, commentContent);


        if (!postUserId) {
            showToast('Error: User information is missing.', 'error');
            return;
        }

        //const token = $('input[name="__RequestVerificationToken"]').val();

        $.ajax({
            url: '/UploadPost/AddCommentOnPost',
            type: 'POST',
            //headers: {
            //    'RequestVerificationToken': token
            //},
            data: {
                userId: postUserId,
                postId: postId,
                PostComment: commentContent // Ensure this matches the controller parameter name
            },
            success: function (response) {
                if (response.success) {
                    showToast('Comment posted successfully!', 'success');
                    commentBox.val('');

                    // Call loadCommentsInModal to refresh comments
                    loadCommentsInModal(postUserId, postId);
                } else {
                    showToast('Error: ' + response.message, 'error');
                }
            },
            error: function (xhr, status, error) {
                showToast('Error posting comment. Please try again.', 'error');
            }
        });
    });

</script>

@*Script for Uploading Comments on a Particular Post*@


@*Script for loading Comments on a Particular Post*@

<script>
    // Automatically load comments when the modal is opened
    $(document).ready(function () {

        $(".modal").on("show.bs.modal", function () {
            const postId = $(this).data("post-id");
            const userId = $(this).data("post-user-id");
            //console.log(userId, postId);

            if (postId && userId) {
                loadCommentsInModal(userId, postId);
            } else {
                console.error("Post ID or User ID is missing.");
            }

        });
    });

    // Function to load comments in the modal
    function loadCommentsInModal(userId, postId) {
        $.ajax({
            url: '/UploadPost/GetCommentOnPost',
            type: 'GET',
            data: { userId: userId, postId: postId },
            success: function (response) {
                if (response.success) {
                    let commentsHtml = response.comments.length
                        ? response.comments.map(comment => `
                        <div class="comment mb-2" style="padding: 10px 20px;">
                            <div style="display: flex; align-items: center;">
                                <img src="${comment.UserImage ? '/Assets/Images/' + comment.UserImage : '/Assets/Images/user (13).png'}"
                                     style="height: 2rem; width: auto;" class="rounded-circle me-3" alt="User Avatar">
                                <span style="display: flex;align-items: center;gap: 20px;text-align: center;white-space: nowrap;">
                                    <h6 class="modal-title">${comment.FirstName}  ${comment.LastName}</h6>
                                <small>${comment.CommentedOn ? formatTimeAgo(comment.CommentedOn) : 'Unknown Date'}</small>
                                </span>

                            </div>
                            <p style="padding-left: 50px; white-space: pre-wrap !important;">${comment.CommentText}</p>
                        </div>`).join("")
                        : "<p>No comments available.</p>";

                    $(`#commentsContainer${postId}`).html(commentsHtml);
                } else {
                    alert(response.message);
                }
            },
            error: function (xhr, status, error) {
                alert("Error loading comments. Please try again.");
                console.error(xhr.responseText);
            }
        });
    }


    // Function to show toast notifications
    function showToast(message, type) {
        const toastContainer = $('#toastContainer');
        const toast = $(`
        <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">${message}</div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
        </div>
    `);
        toastContainer.append(toast);
        const bsToast = new bootstrap.Toast(toast[0]);
        bsToast.show();
        toast.on('hidden.bs.toast', () => toast.remove());
    }

    function generateComments(comments) {
        let commentsHtml = "";

        if (comments.length === 0) {
            commentsHtml = "<p>No comments available.</p>";
        } else {
            comments.forEach(comment => {
                commentsHtml += `
                <div class="comment mb-2">
                    <div style="display: flex; align-items: center;">
                        <img src="${comment.UserImage ? '/Assets/Images/' + comment.UserImage : '/Assets/Images/user (13).png'}"
                             style="height: 2rem; width: auto;" class="rounded-circle me-2" alt="User Avatar">
                        <h6>${comment.FirstName} ${comment.LastName}</strong>
                    </div>
                    <p>${comment.CommentText}</p>
                    <small>${comment.CommentedOn}</small>
                </div>`;
            });
        }

        return commentsHtml;
    }
</script>

@*end Script for loading Comments on a Particular Post*@


