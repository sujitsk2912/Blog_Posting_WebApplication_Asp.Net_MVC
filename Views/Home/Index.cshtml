

@{
    ViewBag.Title = "Home Page";
}



<style>
    #message-text {
        min-height: 30px; /* Minimum height */
        max-height: 400px; /* Minimum height */
        height: auto; /* Allow dynamic height */
        overflow-y: auto; /* Enable vertical scrolling if content exceeds height */
        resize: none; /* Disable manual resizing */

        border: none;
        padding: 0;
        box-shadow: none;
        outline: none;
        font-size: 16px;
        overflow: auto;
        resize: none;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

    #postCommentBox {
        min-height: 10px; /* Minimum height */
        max-height: 400px; /* Minimum height */
        height: auto; /* Allow dynamic height */
        overflow-y: auto; /* Enable vertical scrolling if content exceeds height */
        resize: none; /* Disable manual resizing */

        border: none;
        padding: 0;
        margin: 0;
        box-shadow: none;
        outline: none;
        font-size: 16px;
        overflow: auto;
        resize: none;
        scrollbar-width: none;
        -ms-overflow-style: none;
    }

        #postCommentBox::placeholder {
            color: gray;
        }
</style>


<main style="display:flex">

    <div class="container mt-4 col-6">
        <div>
            @if (ViewBag.FirstName != null)
            {
                <div class="container">
                    <h3>Welcome Back, @ViewBag.FirstName</h3>
                </div>
            }
        </div>
        <form id="postForm" enctype="multipart/form-data">
            @Html.AntiForgeryToken() <!-- Anti-forgery token -->
            <div class="modal fade" id="postModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                <div class="modal-dialog" style="max-width: 600px !important; width:100% !important">
                    <div class="modal-content" style="min-height:500px; ">
                        <div class="modal-header">
                            <img src="/Assets/Images/user (12).png" style="height:3rem;width:fit-content" class="rounded-circle me-3" alt="User Avatar">
                            <h5 class="modal-title" id="exampleModalLabel">@ViewBag.FirstName @ViewBag.LastName</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3 container">
                                <textarea class="form-control container" id="message-text" name="message" placeholder="What do you want to talk about?" rows="2"></textarea>
                                <div id="image-preview" class="mt-3" style="height: fit-content; width: auto; place-self: center;"></div>
                            </div>
                        </div>

                        <div class="d-flex justify-content-between align-items-center p-3">
                            <label for="photo-upload" class="btn btn-outline-info">
                                <i class="bi bi-image"></i> Photo
                            </label>
                            <input type="file" id="photo-upload" name="photo" accept="image/*" style="display: none;" onchange="previewImage(event)" />
                            <button type="submit" id="submitPost" class="btn btn-primary px-3" data-bs-dismiss="modal" aria-label="Close" style="border-radius:20px" disabled>Post</button>
                        </div>
                    </div>
                </div>
            </div>
        </form>


        <!-- Post Form -->
        <div class="card ">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <img src="\Assets\Images\user (12).png" style="height:4rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <button type="button" data-bs-toggle="modal" data-bs-target="#postModal" class="form-control fw-semibold text-start" style="width: 100%; border-radius: 50px; padding:10px 25px; background-color: #b8b0b030 ">Start a post</button>
                </div>
            </div>
        </div>

        <hr />

        <!-- Blog Feed -->
        <div id="blogContainer" class="container mt-4">
            <form id="postFormComments" enctype="multipart/form-data">

                <!-- Dynamically loaded posts will appear here -->
            </form>
        </div>

    </div>

</main>

@*Scrript for Getting all posts*@


<script>
    $(document).ready(function () {
        // Fetch blog posts using AJAX
        $.ajax({
            url: '/Home/GetPosts',  // Ensure correct path
            type: 'GET',
            success: function (response) {
                console.log('AJAX Response:', response); // Verify the output
                populateBlogFeed(response); // Call the function to populate the blog feed
            },
            error: function (xhr, status, error) {
                console.error('AJAX Error:', xhr.responseText);
            }
        });

        // Function to populate the blog feed using map()
        function populateBlogFeed(posts) {
            console.log('Posts Data:', posts); // Log the posts data
            const container = $('#blogContainer'); // Ensure this exists in your HTML
            if (!container.length) {
                console.error('Container #blogContainer not found!');
                return;
            }
            container.empty(); // Clear existing content

            posts.forEach(post => {
                const postHTML = `
        <div class="card mb-4">
            <div class="card-body">
                <div class="d-flex align-items-center mb-3">
                    <img id="getUserImage" src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                         style="height:3rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <div style="display: flex;justify-content: space-between;align-items: self-start;width: 100%;">
                        <div>
                           <h6 id="getUsername" class="mb-0">${post.FirstName || ''} ${post.LastName || ''}</h6>
                            <small id="getPostedOn" class="text-muted">${post.PostedOn ? formatTimeAgo(post.PostedOn) : 'Unknown Date'}</small>
                        </div>
                       <span>
                            <i class="bi bi-three-dots"
                               data-bs-toggle="modal"
                               data-bs-target="#postActionsModal"
                               data-post-id="${post.PostID || ''}"
                               data-post-user-id="${post.UserID || ''}"
                               style="cursor:pointer"></i>
                        </span>
                    </div>
                </div>

                <!-- post action model loaded here -->

                <div class="modal fade" id="postActionsModal" tabindex="-1" aria-labelledby="postActionsModalLabel" aria-hidden="true">
                    <div class="modal-dialog modal-dialog-centered" style="max-width:500px !important">
                        <div class="modal-content">
                            <div class="modal-body" id="postActionsContent">
                                <!-- Dynamic content will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!--end  post action model loaded here -->



                <p id="getPostContent">${post.PostContent || ''}</p>
                ${post.imgURL ? `<img id="getPostImage" src="/PostAssets/images/${post.imgURL}" class="img-fluid rounded mb-3" alt="Blog Image">` : ''}

                <div class="d-flex justify-content-between">
                    <button class="btn btn-outline-danger btn-sm"><i class="fa-solid fa-heart pe-1"></i>Like</button>
                    <button data-bs-toggle="modal" data-bs-target="#commentModal${post.PostID || ''}" class="btn btn-outline-secondary btn-sm">
                        <i class="fa-solid fa-comment pe-1"></i>Comment
                    </button>
                    <button class="btn btn-outline-success btn-sm"><i class="fa-solid fa-share pe-1"></i>Share</button>
                    <button class="btn btn-outline-info btn-sm"><i class="fa-solid fa-bookmark pe-1"></i>Save</button>
                </div>

                <!-- Comment Modal -->
             <div class="modal fade" id="commentModal${post.PostID}" data-post-id="${post.PostID}" data-post-user-id="${post.UserID}" tabindex="-1" aria-labelledby="commentModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-dialog-centered" style="width: 80%">
                    <div class="modal-content" style="display: flex; flex-direction: row; height: 90vh; width: 100%; background: #000; color:#fff">
                        <div class="col-6 d-flex justify-content-center align-items-center">
                            <img src="/PostAssets/images/${post.imgURL || 'img1.png'}" class="img-fluid mb-3" alt="">
                        </div>
                        <div class="col-6 border">
                            <div class="modal-header">
                                <img src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                                     style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                                <h6 class="modal-title" id="commentModalLabel">${post.FirstName + ' ' + post.LastName || 'User'}</h6>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div>
                                ${post.PostContent ? `
                                    <div style="padding:10px 20px">
                                        <div style="display:flex;">
                                            <img src="${post.UserImage ? '/Assets/Images/' + post.UserImage : '/Assets/Images/user (13).png'}"
                                                 style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                                            <h6 class="modal-title" id="commentModalLabel">${post.FirstName + ' ' + post.LastName || 'User'}</h6>
                                        </div>
                                        <p style="padding-left:50px">${post.PostContent}</p>
                                    </div>
                                ` : ''}

                                <div class="modal-body border" id="commentsContainer${post.PostID}">
                                    ${post.Comments ? generateComments(post.Comments) : '<p>No comments available.</p>'}
                                </div>
                            </div>

                            <div class="modal-footer col-6" style="display: flex; position: absolute; bottom: 0; justify-content: center;">
                                <div class="container d-flex align-items-center">
                                    <img src="/Assets/Images/user (13).png" style="height: 2rem; width: auto;" class="rounded-circle me-3" alt="User Avatar">
                                    <textarea id="postCommentBox${post.PostID}" class="form-control container" name="comment" rows="2" placeholder="Add a comment" style="background:transparent;color:#fff;"></textarea>
                                    <button type="button" id="submitComment${post.PostID}" class="btn btn-primary ms-2" style="border-radius:20px">Post</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            </div>
        </div>`;
                container.append(postHTML);
            });
        }

        // Function to format "time ago"
        function formatTimeAgo(postedOn) {
            if (!postedOn) return "Unknown time";

            const postDate = new Date(postedOn);
            if (isNaN(postDate)) return "Invalid date"; // Handle invalid dates

            const now = new Date();
            const diff = Math.floor((now - postDate) / 1000); // Difference in seconds

            if (diff < 60) return `${diff} seconds ago`;
            if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
            if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
            if (diff < 172800) return `Yesterday`;
            return `${Math.floor(diff / 86400)} days ago`;
        }


        // Function to generate comment HTML
        function generateComments(comments) {
            if (!Array.isArray(comments)) {
                return '<p>No comments available.</p>';
            }

            let commentsHTML = '';
            comments.forEach(comment => {
                commentsHTML += `
            <div style="padding:10px 20px">
                <div style="display:flex;">
                    <img src="${comment.UserImage ? '/Assets/Images/' + comment.UserImage : '/Assets/Images/user (13).png'}"
                         style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                    <h6 class="modal-title">${comment.FirstName || ''} ${comment.LastName || ''}</h6>
                </div>
                <p style="padding-left:50px">${comment.CommentText || ''}</p>
            </div>`;
            });
            return commentsHTML;
        }
    });
</script>

@*end Scrript for Getting all posts*@


@*Scrript for uploading posts*@

<script>
    $(document).ready(function () {
        const $postButton = $('#submitPost'); // Post button
        const $messageText = $('#message-text'); // Textarea for post content
        const $photoUpload = $('#photo-upload'); // File input for image upload

        // Function to check if the form has data
        function checkFormData() {
            const hasText = $messageText.val().trim() == ''; // Check if text is not empty
            const hasImage = $photoUpload[0].files.length > 0; // Check if an image is selected

            // Enable the button if either text or image is present
            if (hasText || hasImage) {
                $postButton.prop('disabled', false);
            } else {
                $postButton.prop('disabled', true);
            }
        }

        // Monitor changes in the textarea
        $messageText.on('input', function () {
            checkFormData();
        });

        // Monitor changes in the file input
        $photoUpload.on('change', function () {
            checkFormData();
        });

        // Initial check (in case the page loads with pre-filled data)
        checkFormData();

        // Form submission handler
        $('#postForm').submit(function (e) {
            e.preventDefault(); // Prevent form submission

            // Define the message and file input elements
            var $messageText = $('#messageText'); // Ensure this matches your input ID
            var $photoUpload = $('#photoUpload'); // Ensure this matches your file input ID

            // Create FormData object to handle form fields and files
            var formData = new FormData(this);

            // Append the message text to the FormData object
            var messageText = $messageText.val().trim();
            formData.append('postContent', messageText); // Send null if empty

            // Append the selected image file to the FormData object
            var imageFile = $photoUpload[0].files[0];
            if (imageFile) {
                formData.append('imageFile', imageFile);
            }

            // Debugging: Log FormData contents
            console.log([...formData.entries()]);

            // Get the anti-forgery token value
            var token = $('input[name="__RequestVerificationToken"]').val();
            console.log('Anti-Forgery Token:', token);

            $.ajax({
                url: '/UploadPost/UploadPost', // Your controller action URL
                type: 'POST',
                data: formData,
                headers: {
                    // Include the anti-forgery token in the request headers
                    'RequestVerificationToken': token
                },
                contentType: false, // Important for file uploads
                processData: false, // Prevent jQuery from processing the data
                xhr: function () {
                    var xhr = new window.XMLHttpRequest();
                    // Track upload progress
                    xhr.upload.addEventListener('progress', function (evt) {
                        if (evt.lengthComputable) {
                            var percentComplete = (evt.loaded / evt.total) * 100;
                            console.log('Upload progress: ' + percentComplete + '%');
                        }
                    }, false);
                    return xhr;
                },
                success: function (response) {
                    if (response.success) {
                        // Show a success toast notification
                        showToast('Post uploaded successfully!', 'success');

                        // Clear the form and image preview
                        $('#postForm')[0].reset();
                        $('#image-preview').html('');

                        // Close the modal
                        $('#postModal').modal('hide');

                        // Reload the page after 1.5 seconds
                        setTimeout(function () {
                            location.reload();
                        }, 1500);

                    } else {
                        // Show an error toast notification
                        showToast('Post uploading failed!', 'error');
                    }
                },
                error: function (xhr, status, error) {
                    // Show an error toast notification
                    console.error('Error:', xhr.responseText); // Log the error for debugging
                    showToast('Error: ' + xhr.responseText, 'error');
                }
            });
        });
        // Function to show toast notifications
        function showToast(message, type) {
            const toastContainer = $('#toastContainer');
            const toast = $(`
                <div class="toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="d-flex">
                        <div class="toast-body">
                            ${message}
                        </div>
                        <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
                    </div>
                </div>
            `);

            toastContainer.append(toast);
            const bsToast = new bootstrap.Toast(toast[0]);
            bsToast.show();

            // Remove the toast after it hides
            toast.on('hidden.bs.toast', function () {
                toast.remove();
            });
        }
    });
</script>

@*end Scrript for uploading posts*@


@*Scrript for image preview*@


<script>
    $(document).ready(function () {
        // Image Preview Function
        window.previewImage = function (event) {
            var reader = new FileReader();
            reader.onload = function () {
                $('#image-preview').html(`
                <img src="${reader.result}" class="img-fluid rounded mb-3" alt="Preview Image">
            `);
            };
            reader.readAsDataURL(event.target.files[0]);
        };
    });
</script>

@*end Scrript for image preview*@

@*Scrript for adjusting post content box*@


<script>
    $(document).ready(function () {
        const $messageText = $('#message-text');

        // Function to adjust textarea height dynamically
        function adjustTextareaHeight() {
            $messageText.height('auto'); // Reset height to auto
            $messageText.height($messageText[0].scrollHeight); // Set height to scrollHeight
        }

        // Adjust height on input
        $messageText.on('input', function () {
            adjustTextareaHeight();
        });

        // Initial height adjustment
        adjustTextareaHeight();
    });
</script>

@*end Scrript for adjusting post content box*@

@*<script>
        $(document).ready(function () {
            // Use event delegation for dynamically generated elements
            $(document).on('input', '#postCommentBox', function () {
                const $postCommentBox = $(this);
                const $submitCommentButton = $('#submitComment');

                // Enable/disable the button based on text content
                if ($postCommentBox.val().trim() !== '') {
                    $submitCommentButton.prop('disabled', false);
                } else {
                    $submitCommentButton.prop('disabled', true);
                }
            });

            // Initial check for pre-filled data (if any)
            const $postCommentBox = $('#postCommentBox');
            const $submitCommentButton = $('#submitComment');
            if ($postCommentBox.length && $submitCommentButton.length) {
                if ($postCommentBox.val().trim() !== '') {
                    $submitCommentButton.prop('disabled', false);
                } else {
                    $submitCommentButton.prop('disabled', true);
                }
            }
        });
    </script>*@

@*Add JavaScript to dynamically populate the modal based on the selected post and the logged-in user's ID.*@

<script>
    $(document).ready(function () {
        // Get the logged-in user's ID (replace this with your actual logic)
        const loggedInUserId = @ViewBag.UserId; // Replace with your method to get the logged-in user's ID

        // Event listener for opening the post actions modal
        $(document).on('click', '[data-bs-target="#postActionsModal"]', function () {
            const postId = $(this).data('post-id');
            const postUserId = $(this).data('post-user-id');

            // Store the postId and postUserId in the modal for later use
            $('#postActionsModal').data('post-id', postId);
            $('#postActionsModal').data('post-user-id', postUserId);

            // Clear previous content
            $('#postActionsContent').empty();

            // Check if the logged-in user is the post creator
            if (postUserId === loggedInUserId) {
                // Add Edit and Delete options for the post owner
                $('#postActionsContent').append(`
                    <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                        <i class="fa-solid fa-edit me-2 text-primary"></i> Edit Post
                    </a>
                    <a href="javascript:void(0)" class="text-decoration-none text-danger fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                        <i class="fa-solid fa-trash-alt me-2"></i> Delete Post
                    </a>
                `);
            } else {
                // Add Share, Copy Link, and Report options for other users' posts
                $('#postActionsContent').append(`
                    <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                        <i class="fa-solid fa-share me-2 text-primary"></i> Share
                    </a>
                    <a href="javascript:void(0)" class="text-decoration-none text-dark fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                        <i class="fa-solid fa-link me-2 text-primary"></i> Copy Link
                    </a>
                  <!--  <a href="javascript:void(0)" class="text-decoration-none text-danger fw-semibold d-flex align-items-center border-bottom" style="padding:10px 0;">
                        <i class="fa-solid fa-flag me-2"></i> Report
                    </a> -->
                `);
            }

            // Add Cancel option
            $('#postActionsContent').append(`
                <a href="javascript:void(0)" class="text-decoration-none text-secondary fw-semibold d-flex align-items-center" data-bs-dismiss="modal" aria-label="Close" style="padding:10px 0;">
                    <i class="fa-solid fa-close me-2"></i> Cancel
                </a>
            `);

            // Initialize and show the modal
            $('#postActionsModal').modal('show');
        });
    });
</script>



<script>
    // Handle Delete Post
    $(document).on('click', '#postActionsContent a.text-danger', function () {
        const postId = $('#postActionsModal').data('post-id'); // Get the post ID
        const userId = $('#postActionsModal').data('post-user-id'); // Get the user ID

        Swal.fire({
            title: 'Are you sure?',
            text: 'You are about to delete this post!',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, delete it!'
        }).then((result) => {
            if (result.isConfirmed) {
                $.ajax({
                    url: '/UploadPost/DeletePost', // Ensure this matches your route
                    type: 'POST',
                    data: {
                        userId: userId,
                        postId: postId,
                        __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() // CSRF token
                    },
                    success: function (response, status, xhr) {
                        // Ensure JSON is received
                        if (xhr.getResponseHeader('Content-Type').includes('application/json')) {
                            if (response.success) {
                                // Remove post on success
                                $(`[data-post-id="${postId}"]`).closest('.card').remove();
                                Swal.fire({
                                    title: 'Deleted!',
                                    text: 'Your post has been deleted.',
                                    icon: 'success',
                                    confirmButtonText: 'OK'
                                }).then(() => {
                                    // Optionally reload the page or perform other actions
                                    window.location.reload();
                                });
                            } else {
                                showToast('Failed to delete post: ' + response.message, 'error');
                            }
                        } else {
                            showToast('Unexpected response. Check console for details.', 'error');
                            console.error('Response:', response);
                        }
                    },
                    error: function (xhr, status, error) {
                        showToast('Error occurred: ' + error, 'error');
                        console.error('AJAX Error:', xhr);
                    }
                });
            }
        });
    });


    // Handle Edit Post
    $(document).on('click', '#postActionsContent a.text-dark', function () {
        const postId = $('#postActionsModal').data('post-id'); // Get the post ID from the modal
        // Redirect to the edit page or open an edit modal
        window.location.href = `/EditPost/Index/${postId}`;
    });

    // Handle Share Post
    $(document).on('click', '#postActionsContent a.text-dark:contains("Share")', function () {
        const postId = $('#postActionsModal').data('post-id'); // Get the post ID from the modal
        const shareUrl = `${window.location.origin}/Post/Details/${postId}`;
        alert(`Share this post: ${shareUrl}`);
    });

    // Handle Copy Link
    $(document).on('click', '#postActionsContent a.text-dark:contains("Copy Link")', function () {
        const postId = $('#postActionsModal').data('post-id'); // Get the post ID from the modal
        const postUrl = `${window.location.origin}/Post/Details/${postId}`;

        // Copy the link to the clipboard
        navigator.clipboard.writeText(postUrl).then(() => {
            alert('Link copied to clipboard!');
        }).catch(() => {
            alert('Failed to copy link.');
        });
    });

    // Handle Report Post
    $(document).on('click', '#postActionsContent a.text-danger:contains("Report")', function () {
        const postId = $('#postActionsModal').data('post-id'); // Get the post ID from the modal
        alert(`Report post with ID: ${postId}`);
    });
</script>

@*script for uploading commenrts on perticular post*@
<script>
    $(document).on('click', '[id^=submitComment]', function () {
        // Get the PostID from the modal's data attribute
        const postId = $(this).closest('.modal').data('post-id');
        const userId = $(this).closest('.modal').data('post-user-id'); // Logged-in user's ID
        const commentText = $(`#postCommentBox${postId}`).val().trim(); // Get the comment text

        if (!commentText) {
            alert('Please enter a comment.');
            return;
        }

        // Send the comment to the server using AJAX
        $.ajax({
            url: '/YourController/AddCommentOnPost', // Replace with your controller endpoint
            type: 'POST',
            data: {
                userId: userId,
                postId: postId,
                PostComment: commentText
            },
            success: function (response) {
                if (response.success) {
                    // Clear the comment box
                    $(`#postCommentBox${postId}`).val('');

                    // Append the new comment to the comments container
                    const newComment = `
                    <div style="padding:10px 20px">
                        <div style="display:flex;">
                            <img src="/Assets/Images/user (13).png" style="height:2rem;width:auto" class="rounded-circle me-3" alt="User Avatar">
                            <h6 class="modal-title">${response.commenterName || 'User'}</h6>
                        </div>
                        <p style="padding-left:50px">${commentText}</p>
                    </div>
                `;
                    $(`#commentsContainer${postId}`).append(newComment);
                } else {
                    alert('Failed to add comment: ' + response.message);
                }
            },
            error: function (xhr, status, error) {
                alert('Error: ' + error);
            }
        });
    });
</script>

@*script for uploading commements on perticular post*@



